// Mocks generated by Mockito 5.4.6 from annotations
// in operatortracker/test/mocks/mock_login.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:operatortracker/features/login/domain/entities/login_entity.dart'
    as _i2;
import 'package:operatortracker/features/login/domain/repositories/login_repository.dart'
    as _i3;
import 'package:operatortracker/features/login/domain/usecases/login_usecase.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginEntity_0 extends _i1.SmartFake implements _i2.LoginEntity {
  _FakeLoginEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoginRepository_1 extends _i1.SmartFake
    implements _i3.LoginRepository {
  _FakeLoginRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i3.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.LoginEntity> loginTabletUnit({
    required String? unitId,
    required String? nik,
    required String? shiftId,
    required int? loginType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loginTabletUnit, [], {
              #unitId: unitId,
              #nik: nik,
              #shiftId: shiftId,
              #loginType: loginType,
            }),
            returnValue: _i4.Future<_i2.LoginEntity>.value(
              _FakeLoginEntity_0(
                this,
                Invocation.method(#loginTabletUnit, [], {
                  #unitId: unitId,
                  #nik: nik,
                  #shiftId: shiftId,
                  #loginType: loginType,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.LoginEntity>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i5.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LoginRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeLoginRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.LoginRepository);

  @override
  _i4.Future<_i2.LoginEntity> execute({
    required String? unitId,
    required String? nik,
    required String? shiftId,
    required int? loginType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {
              #unitId: unitId,
              #nik: nik,
              #shiftId: shiftId,
              #loginType: loginType,
            }),
            returnValue: _i4.Future<_i2.LoginEntity>.value(
              _FakeLoginEntity_0(
                this,
                Invocation.method(#execute, [], {
                  #unitId: unitId,
                  #nik: nik,
                  #shiftId: shiftId,
                  #loginType: loginType,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.LoginEntity>);
}
