// Mocks generated by Mockito 5.4.6 from annotations
// in operatortracker/test/mocks/mock_registration_device.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:operatortracker/features/registrationdevice/domain/entities/device_entity.dart'
    as _i4;
import 'package:operatortracker/features/registrationdevice/domain/repositories/installation_repository.dart'
    as _i2;
import 'package:operatortracker/features/registrationdevice/domain/usecases/check_device_usecase.dart'
    as _i5;
import 'package:operatortracker/features/registrationdevice/domain/usecases/register_device_usecase.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInstallationRepository_0 extends _i1.SmartFake
    implements _i2.InstallationRepository {
  _FakeInstallationRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InstallationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstallationRepository extends _i1.Mock
    implements _i2.InstallationRepository {
  MockInstallationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.DeviceEntity?> checkDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#checkDevice, [deviceId]),
            returnValue: _i3.Future<_i4.DeviceEntity?>.value(),
          )
          as _i3.Future<_i4.DeviceEntity?>);

  @override
  _i3.Future<bool> registerDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#registerDevice, [deviceId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> loginAdmin(String? nik, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#loginAdmin, [nik, password]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> activateDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#activateDevice, [deviceId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}

/// A class which mocks [CheckDeviceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckDeviceUseCase extends _i1.Mock
    implements _i5.CheckDeviceUseCase {
  MockCheckDeviceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InstallationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeInstallationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.InstallationRepository);

  @override
  _i3.Future<_i4.DeviceEntity?> call(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [deviceId]),
            returnValue: _i3.Future<_i4.DeviceEntity?>.value(),
          )
          as _i3.Future<_i4.DeviceEntity?>);
}

/// A class which mocks [RegisterDeviceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterDeviceUseCase extends _i1.Mock
    implements _i6.RegisterDeviceUseCase {
  MockRegisterDeviceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.InstallationRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeInstallationRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.InstallationRepository);

  @override
  _i3.Future<bool> call(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [deviceId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
