// Mocks generated by Mockito 5.4.6 from annotations
// in operatortracker/test/mocks/mock_chat.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:operatortracker/core/session/storage_manager.dart' as _i8;
import 'package:operatortracker/features/chat/domain/entities/message_entity.dart'
    as _i2;
import 'package:operatortracker/features/chat/domain/repositories/chat_repository.dart'
    as _i3;
import 'package:operatortracker/features/chat/domain/usecases/get_messages_use_case.dart'
    as _i5;
import 'package:operatortracker/features/chat/domain/usecases/listen_chat_messages_use_case.dart'
    as _i7;
import 'package:operatortracker/features/chat/domain/usecases/send_message_use_case.dart'
    as _i6;
import 'package:operatortracker/features/login/domain/entities/login_entity.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMessageEntity_0 extends _i1.SmartFake implements _i2.MessageEntity {
  _FakeMessageEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeChatRepository_1 extends _i1.SmartFake
    implements _i3.ChatRepository {
  _FakeChatRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRepository extends _i1.Mock implements _i3.ChatRepository {
  MockChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.MessageEntity>> getMessages(String? unitId) =>
      (super.noSuchMethod(
            Invocation.method(#getMessages, [unitId]),
            returnValue: _i4.Future<List<_i2.MessageEntity>>.value(
              <_i2.MessageEntity>[],
            ),
          )
          as _i4.Future<List<_i2.MessageEntity>>);

  @override
  _i4.Future<_i2.MessageEntity> sendMessage(
    String? unitId,
    String? message,
    String? categoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [unitId, message, categoryId]),
            returnValue: _i4.Future<_i2.MessageEntity>.value(
              _FakeMessageEntity_0(
                this,
                Invocation.method(#sendMessage, [unitId, message, categoryId]),
              ),
            ),
          )
          as _i4.Future<_i2.MessageEntity>);

  @override
  void listenToMessages(
    String? unitId,
    void Function(_i2.MessageEntity)? onMessage,
  ) => super.noSuchMethod(
    Invocation.method(#listenToMessages, [unitId, onMessage]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GetChatMessagesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetChatMessagesUseCase extends _i1.Mock
    implements _i5.GetChatMessagesUseCase {
  MockGetChatMessagesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ChatRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ChatRepository);

  @override
  _i4.Future<List<_i2.MessageEntity>> call(String? unitId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [unitId]),
            returnValue: _i4.Future<List<_i2.MessageEntity>>.value(
              <_i2.MessageEntity>[],
            ),
          )
          as _i4.Future<List<_i2.MessageEntity>>);
}

/// A class which mocks [SendChatMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendChatMessageUseCase extends _i1.Mock
    implements _i6.SendChatMessageUseCase {
  MockSendChatMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ChatRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ChatRepository);

  @override
  _i4.Future<_i2.MessageEntity> call(
    String? unitId,
    String? message,
    String? categoryId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [unitId, message, categoryId]),
            returnValue: _i4.Future<_i2.MessageEntity>.value(
              _FakeMessageEntity_0(
                this,
                Invocation.method(#call, [unitId, message, categoryId]),
              ),
            ),
          )
          as _i4.Future<_i2.MessageEntity>);
}

/// A class which mocks [ListenChatMessagesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockListenChatMessagesUseCase extends _i1.Mock
    implements _i7.ListenChatMessagesUseCase {
  MockListenChatMessagesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ChatRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeChatRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.ChatRepository);

  @override
  void call(String? unitId, void Function(_i2.MessageEntity)? onMessage) =>
      super.noSuchMethod(
        Invocation.method(#call, [unitId, onMessage]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StorageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageManager extends _i1.Mock implements _i8.StorageManager {
  MockStorageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveLoginEntity(_i9.LoginEntity? entity) =>
      (super.noSuchMethod(
            Invocation.method(#saveLoginEntity, [entity]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i9.LoginEntity?> loadLoginEntity() =>
      (super.noSuchMethod(
            Invocation.method(#loadLoginEntity, []),
            returnValue: _i4.Future<_i9.LoginEntity?>.value(),
          )
          as _i4.Future<_i9.LoginEntity?>);

  @override
  _i4.Future<void> clearLoginEntity() =>
      (super.noSuchMethod(
            Invocation.method(#clearLoginEntity, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#saveToken, [token]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> loadToken() =>
      (super.noSuchMethod(
            Invocation.method(#loadToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> clearToken() =>
      (super.noSuchMethod(
            Invocation.method(#clearToken, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
